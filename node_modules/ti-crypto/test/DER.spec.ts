/// <reference path="../node_modules/@types/mocha/index.d.ts" />

/**
 * Tests for the tiCrypto DER describe.
 * 
 * @author Sam Claus
 * @version 10/5/17
 * @copyright Tera Insights, LLC.
 */

import {
    BIT_STR,
    concat,
    decodeBase256Integer,
    decodeDER,
    DERBlock,
    encodeToDER,
    EOC,
    INTEGER,
    OCT_STR,
    SEQUENCE,
    unsigned
} from "../src/lib/_der";
import {randomBytes} from "../src/lib/misc"
import {expect} from "chai";
import * as chaiAsync from "chai-as-promised";
import * as sinon from "sinon";

describe("DER encoding", function() {

    it("#concat", function() {
        for (let i = 0; i < 10; i++) {
            let bufc = Math.ceil(Math.random() * 10);
            let bufs: Uint8Array[] = [];

            for (let j = 0; j < bufc; j++)
                bufs.push(randomBytes(Math.floor(Math.random() * 10)));
            
            let cat = concat(...bufs);
            let off = 0;

            for (let j = 0; j < bufc; j++)
                expect(bufs[j]).to.deep.equal(cat.slice(off, off += bufs[j].length));
            
            expect(off).to.equal(cat.length);
        }
    });

    it("#decodeBase256Integer", function() {
        let buf1 = new Uint8Array([]);
        let buf2 = new Uint8Array([0x80, 0x00, 0x03, 0x9f, 0x00]);
        let buf3 = new Uint8Array([0x00, 0x00, 0x03, 0x9f, 0x00]);

        expect(decodeBase256Integer(buf1)).to.equal(0);
        expect(decodeBase256Integer(buf2, true)).to.equal(-549755576576);
        expect(decodeBase256Integer(buf2)).to.equal(549756051200);
        expect(decodeBase256Integer(buf3, true)).to.equal(237312);
        expect(decodeBase256Integer(buf3)).to.equal(237312);
    });

    it("#unsigned", function() {
        expect(unsigned.bind(null, new Uint8Array([]))).to.throw();
        expect(unsigned(new Uint8Array([0x00, 0x00, 0x73]))).to.deep.equal(new Uint8Array([0x73]));
        expect(unsigned(new Uint8Array([0x00, 0x00, 0x80]))).to.deep.equal(new Uint8Array([0x00, 0x80]));
        expect(unsigned(new Uint8Array([0x80]))).to.deep.equal(new Uint8Array([0x00, 0x80]));
    });
    
    it("should encode to DER and decode back to raw values", function() {
        let buf1 = randomBytes(Math.ceil(Math.random() * 20));
        let buf2 = randomBytes(Math.ceil(Math.random() * 20));
        let buf3 = randomBytes(Math.ceil(Math.random() * 20));

        let derStructure = encodeToDER(BIT_STR,
            encodeToDER(SEQUENCE, concat(
                encodeToDER(INTEGER, buf1),
                encodeToDER(INTEGER, buf2),
                encodeToDER(INTEGER, buf3)
            ))
        );

        let bitString = decodeDER(derStructure);

        expect(bitString.type).to.equal(BIT_STR);
        expect(bitString.remaining.length).to.equal(0);

        let sequence = decodeDER(bitString.content);
        
        expect(sequence.type).to.equal(SEQUENCE);
        expect(sequence.remaining.length).to.equal(0);

        let int1 = decodeDER(sequence.content);
        let int2 = decodeDER(int1.remaining);
        let int3 = decodeDER(int2.remaining);

        expect(int3.remaining.length).to.equal(0);
        expect(int1.type).to.equal(INTEGER);
        expect(int1.content).to.deep.equal(buf1);
        expect(int2.type).to.equal(INTEGER);
        expect(int2.content).to.deep.equal(buf2);
        expect(int3.type).to.equal(INTEGER);
        expect(int3.content).to.deep.equal(buf3);
    });
});