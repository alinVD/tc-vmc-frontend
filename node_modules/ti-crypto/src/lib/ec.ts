
export type Curve = "P-256"|"P-384"|"P-521";

export interface ECDHKeyPair {
    public: ECDHPublic;
    private: ECDHPrivate;
}

export function genECDHPair(curve: Curve, exportable?: boolean): Promise<ECDHKeyPair> {
    return new Promise<ECDHKeyPair>((resolve, reject) => {
        return crypto.subtle.generateKey({
            name: "ECDH",
            namedCurve: curve
        } as any, exportable || false, ["deriveKey", "deriveBits"]).then((pair: CryptoKeyPair) => {
            return {
                public: new ECDHPublic(pair.publicKey, curve),
                private: new ECDHPrivate(pair.privateKey, curve)
            };
        });
    });
}

export function importECDHPublic(data: Uint8Array, format: "raw"|"spki",
    curve: Curve, exportable?: boolean): Promise<ECDHPublic> {
    return new Promise((res, rej) => {
        return crypto.subtle.importKey(format, data, {
            name: "ECDH",
            namedCurve: curve
        }, exportable || false, []).then(key => new ECDHPublic(key, curve));
    });
}

export class ECDHPublic {

    public export(format: "raw"|"spki"): Promise<Uint8Array> {
        return new Promise((res, rej) => {
            return crypto.subtle.exportKey(format, this.key)
                .then(buf => new Uint8Array(buf));
        });
    }

    constructor(
        readonly key: CryptoKey,
        readonly curve: Curve
    ) {}

}

export class ECDHPrivate {

    public deriveBytes(pub: ECDHPublic, bytes?: number): Promise<Uint8Array> {
        return new Promise<Uint8Array>((res, rej) => {
            if (pub.curve !== this.curve)
                throw new Error(`tried to use ${pub.curve} ECDH public with ${this.curve} private`);

            crypto.subtle.deriveBits({
                name: "ECDH",
                namedCurve: this.curve,
                public: pub.key
            } as any, this.key, bytes * 8).then(
                buf => res(new Uint8Array(buf)),
                err => rej(`ECDH deriveBytes: CryptoSubtle error (${err}).`)
            );
        });
    }

    constructor(
        private readonly key: CryptoKey,
        public readonly curve: Curve
    ) {}

}